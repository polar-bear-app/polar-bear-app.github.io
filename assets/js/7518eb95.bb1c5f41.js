"use strict";(self.webpackChunkpolar_bear_app_github_io=self.webpackChunkpolar_bear_app_github_io||[]).push([[767],{3331:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>s});var a=r(8101);const t={},i=a.createContext(t);function o(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),a.createElement(i.Provider,{value:n},e.children)}},3985:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"developer/wayland","title":"The Wayland Protocol","description":"Display Server","source":"@site/docs/developer/4-wayland.md","sourceDirName":"developer","slug":"/developer/wayland","permalink":"/docs/developer/wayland","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/developer/4-wayland.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"title":"The Wayland Protocol"},"sidebar":"developerSidebar","previous":{"title":"What is Proot?","permalink":"/docs/developer/proot"}}');var t=r(5105),i=r(3331);const o={title:"The Wayland Protocol"},s=void 0,l={},d=[{value:"Display Server",id:"display-server",level:2},{value:"X11 and Xorg",id:"x11-and-xorg",level:2},{value:"Wayland",id:"wayland",level:2},{value:"Xwayland",id:"xwayland",level:2},{value:"Wrapping it up",id:"wrapping-it-up",level:2}];function p(e){const n={a:"a",admonition:"admonition",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"display-server",children:"Display Server"}),"\n",(0,t.jsx)(n.p,{children:"You may be surprise that to display some pixels from your application, say, Firefox, to your screen, Linux implement a client-server protocol. In this model, Firefox is the client and the display server is the server (obviously)."}),"\n",(0,t.jsx)(n.p,{children:"Not all operating systems use a display server. Windows uses a monolithic graphics architecture where the windowing system, input handling, and rendering are all tightly integrated into the operating system."}),"\n",(0,t.jsx)(n.h2,{id:"x11-and-xorg",children:"X11 and Xorg"}),"\n",(0,t.jsx)(n.p,{children:"If you have used Linux for a while, you must have seen the word X11 or Xorg. X11 is the original protocol for the display server. Xorg is a display server that implements the X11 protocol."}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:"Remember, X11 is a protocol, Xorg is a display server. Although they are often used interchangeably, they are not the same thing."})}),"\n",(0,t.jsx)(n.h2,{id:"wayland",children:"Wayland"}),"\n",(0,t.jsx)(n.p,{children:"Wayland is a modern display server protocol that is designed to replace X11. And Polar Bear follows this trend. This approach has some advantages:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Wayland servers, more frequently called ",(0,t.jsx)(n.strong,{children:"compositors"}),", are much more efficient than X11 servers."]}),"\n",(0,t.jsx)(n.li,{children:"By implementing a minimal Wayland compositor, we can run Xwayland on top of it."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"xwayland",children:"Xwayland"}),"\n",(0,t.jsx)(n.p,{children:"Xwayland, just like Xorg, is a display server that implements the X11 protocol."}),"\n",(0,t.jsxs)(n.p,{children:["Xwayland, different from Xorg, in that it runs ",(0,t.jsx)(n.strong,{children:"on top of another Wayland compositor"}),", while Xorg runs on top of the Linux kernel."]}),"\n",(0,t.jsx)(n.p,{children:"How Xwayland did this, you may ask? It is more obvious than you think: it acts as a Wayland client. In other words, it is a Wayland client that takes the responsibility of an X11 display server."}),"\n",(0,t.jsx)(n.h2,{id:"wrapping-it-up",children:"Wrapping it up"}),"\n",(0,t.jsx)(n.p,{children:"The magic behind Polar Bear is that:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"It implements a minimal Wayland compositor that runs on an Android native activity."}),"\n",(0,t.jsx)(n.li,{children:"That minimal Wayland compositor runs Xwayland."}),"\n",(0,t.jsx)(n.li,{children:"Xwayland displays the UI of other applications, such as Firefox or Xfce."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Fun fact: ",(0,t.jsxs)(n.a,{href:"https://github.com/termux/termux-x11",children:["Termux",":X11"]})," also implements a display server, but it is based on X11. Just like how Xwayland is an X11 server running on top of Wayland, Termux",":X11"," is an X11 server running on top of an Android activity. (And Xorg is an X11 server running on top of the Linux kernel, remember that?)"]})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}}}]);